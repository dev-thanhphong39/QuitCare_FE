import React, { useEffect, useState } from "react";
import api from "../../configs/axios";
import Navbar from "../navbar/Navbar";
import Footer from "../footer/Footer";
import "./SuggestPlaning.css";
import { useNavigate, Link } from "react-router-dom";
import { Modal, Button } from "antd"; // Th√™m import Modal v√† Button

function SuggestPlaning() {
  // ƒê·ªçc tr·∫°ng th√°i x√°c nh·∫≠n t·ª´ localStorage khi kh·ªüi t·∫°o
  const accountId = localStorage.getItem("accountId");
  const [isConfirmed, setIsConfirmed] = useState(
    () => localStorage.getItem(`plan_confirmed_${accountId}`) === "true"
  );
  const [plan, setPlan] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [confirmLoading, setConfirmLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    if (!accountId) {
      navigate("/login");
      return;
    }

    // H√†m l·∫•y k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t
    async function fetchPlan() {
      setLoading(true);
      setError("");

      try {
        // Ki·ªÉm tra xem c√≥ k·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c l∆∞u trong backend kh√¥ng
        const res = await api.get(`/v1/customers/${accountId}/quit-plans`);
        if (res.data && !Array.isArray(res.data)) {
          setPlan(res.data);
          // Ki·ªÉm tra xem ƒë√£ x√°c nh·∫≠n ch∆∞a
          if (res.data.isAgreedPlan) {
            setIsConfirmed(true);
          }
          setLoading(false); // TH√äM D√íNG N√ÄY
          return;
        }
      } catch (err) {
        // N·∫øu ch∆∞a c√≥ k·∫ø ho·∫°ch trong backend, ƒë·ªçc t·ª´ localStorage
        console.log("Ch∆∞a c√≥ k·∫ø ho·∫°ch trong backend, ƒë·ªçc t·ª´ localStorage");
      }

      // ƒê·ªçc k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t t·ª´ localStorage
      const suggestedPlan = localStorage.getItem("suggestedPlan");
      if (suggestedPlan) {
        const planData = JSON.parse(suggestedPlan);
        setPlan(planData);
      } else {
        setError("Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t.");
      }

      setLoading(false);
    }

    fetchPlan();
  }, [accountId, navigate]);

  // H√†m x·ª≠ l√Ω x√°c nh·∫≠n k·∫ø ho·∫°ch - G·ªåI API L√öC N√ÄY
  const handleConfirmPlan = async () => {
    setConfirmLoading(true);
    try {
      // L·∫•y th√¥ng tin kh·∫£o s√°t t·ª´ localStorage
      const surveyData = localStorage.getItem("planSurvey");
      if (!surveyData) {
        throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh·∫£o s√°t");
      }

      const survey = JSON.parse(surveyData);

      // B∆∞·ªõc 1: G·ª≠i th√¥ng tin kh·∫£o s√°t
      const payload = {
        started_smoking_age: parseInt(survey.started_smoking_age),
        cigarettes_per_day: parseInt(survey.cigarettes_per_day),
        cigarettes_per_pack: parseInt(survey.cigarettes_per_pack),
        timeToFirstCigarette: mapTime(survey.timeToFirstCigarette),
        status: "ACTIVE",
        quitAttempts: mapQuitAttempts(survey.quitAttempts),
        longestQuitDuration: mapDuration(survey.longestQuitDuration),
        cravingWithoutSmoking: survey.cravingWithoutSmoking === "true",
        triggerSituation: survey.triggerSituation.trim(),
        quitIntentionTimeline: mapTimeline(survey.quitIntentionTimeline),
        readinessLevel: mapReadiness(survey.readinessLevel),
        quitReasons: survey.quitReasons,
      };

      await api.post(`/smoking-status/account/${accountId}`, payload);

      // B∆∞·ªõc 2: T·∫°o k·∫ø ho·∫°ch v·ªõi systemPlan = true
      const planResponse = await api.post(
        `/v1/customers/${accountId}/quit-plans`,
        {
          systemPlan: true,
        }
      );

      // B∆∞·ªõc 3: X√°c nh·∫≠n k·∫ø ho·∫°ch
      await api.put(
        `/v1/customers/${accountId}/quit-plans/${planResponse.data.id}`,
        {
          isAgreedPlan: true,
          quitPlanStatus: "DRAFT",
        }
      );

      // B∆∞·ªõc 4: L·∫•y l·∫°i d·ªØ li·ªáu k·∫ø ho·∫°ch t·ª´ backend v√† c·∫≠p nh·∫≠t state
      const updatedPlanResponse = await api.get(
        `/v1/customers/${accountId}/quit-plans`
      );
      if (updatedPlanResponse.data) {
        setPlan(updatedPlanResponse.data); // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu t·ª´ backend
      }

      // ƒê√°nh d·∫•u ƒë√£ x√°c nh·∫≠n
      setIsConfirmed(true);
      localStorage.setItem(`plan_confirmed_${accountId}`, "true");

      // X√≥a d·ªØ li·ªáu t·∫°m th·ªùi NH∆ØNG GI·ªÆ L·∫†I state plan
      localStorage.removeItem("suggestedPlan");
      localStorage.removeItem("planSurvey");

      Modal.success({
        title: "X√°c nh·∫≠n th√†nh c√¥ng!",
        content: "K·∫ø ho·∫°ch cai thu·ªëc ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Ch√∫c b·∫°n th√†nh c√¥ng!",
        okText: "ƒê√≥ng",
      });
    } catch (err) {
      console.error("L·ªói x√°c nh·∫≠n:", err);
      Modal.error({
        title: "L·ªói x√°c nh·∫≠n",
        content: "Kh√¥ng th·ªÉ x√°c nh·∫≠n k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i!",
      });
    } finally {
      setConfirmLoading(false);
    }
  };

  // Th√™m c√°c h√†m mapping t·ª´ Planning.jsx
  const mapTime = (value) => {
    switch (value) {
      case "‚â§5 ph√∫t":
        return "LESS_THAN_5_MIN";
      case "6‚Äì30 ph√∫t":
        return "BETWEEN_6_AND_30_MIN";
      case "31‚Äì60 ph√∫t":
        return "BETWEEN_31_AND_60_MIN";
      case ">60 ph√∫t":
        return "MORE_THAN_60_MIN";
      default:
        return "";
    }
  };

  const mapQuitAttempts = (value) => {
    const num = parseInt(value);
    if (num === 0) return "NONE";
    if (num <= 2) return "ONE_TO_TWO";
    return "MORE_THAN_THREE";
  };

  const mapDuration = (value) => {
    switch (value) {
      case "LESS_THAN_1_DAY":
        return "LESS_THAN_1_DAY";
      case "BETWEEN_1_AND_3_DAYS":
        return "BETWEEN_1_AND_3_DAYS";
      case "ONE_WEEK":
        return "ONE_WEEK";
      case "MORE_THAN_ONE_WEEK":
        return "MORE_THAN_ONE_WEEK";
      default:
        return "";
    }
  };

  const mapTimeline = (value) => {
    switch (value) {
      case "7 ng√†y":
        return "ONEWEEK";
      case "1 th√°ng":
        return "ONEMONTH";
      case "3 th√°ng":
        return "THREEMONTH";
      case "5 th√°ng":
        return "FIVEMONTH";
      case "Ch∆∞a ch·∫Øc":
        return "UNKNOWN";
      default:
        return "";
    }
  };

  const mapReadiness = (value) => {
    switch (value) {
      case "Ch∆∞a s·∫µn s√†ng":
        return "NOTREADY";
      case "ƒêang c√¢n nh·∫Øc":
        return "UNDERCONSIDERATION";
      case "R·∫•t s·∫µn s√†ng":
        return "ALREADY";
      default:
        return "";
    }
  };

  return (
    <>
      <Navbar />
      <div className="suggest-container">
        {loading ? (
          // Hi·ªÉn th·ªã loading khi ƒëang t·∫£i d·ªØ li·ªáu
          <div style={{ textAlign: "center", padding: 40 }}>ƒêang t·∫£i...</div>
        ) : error ? (
          // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ l·ªói
          <div style={{ color: "red", textAlign: "center", padding: 40 }}>
            {error}
          </div>
        ) : (
          // N·∫øu c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch th√¨ hi·ªÉn th·ªã th√¥ng tin k·∫ø ho·∫°ch
          <>
            <div className="suggest-header">
              <div>
                <span role="img" aria-label="plan">
                  üìã
                </span>
                <b> K·∫ø ho·∫°ch cai thu·ªëc ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t</b>
              </div>
              <div>
                <span role="img" aria-label="brain">
                  üß†
                </span>
                {/* Hi·ªÉn th·ªã m·ª©c ƒë·ªô nghi·ªán */}
                M·ª©c ƒë·ªô nghi·ªán h·ªá th·ªëng ƒë√°nh gi√°:{" "}
                <b>
                  {plan.addictionLevel === "LOW"
                    ? "Th·∫•p"
                    : plan.addictionLevel === "MEDIUM"
                    ? "Trung b√¨nh"
                    : "Cao"}
                </b>
              </div>
              <div>
                <span role="img" aria-label="cigarette">
                  üö¨
                </span>
                {/* Hi·ªÉn th·ªã s·ªë ƒëi·∫øu h√∫t m·ªói ng√†y ·ªü giai ƒëo·∫°n ƒë·∫ßu */}
                Trung b√¨nh s·ªë ƒëi·∫øu h√∫t m·ªói ng√†y:{" "}
                <b>
                  {plan.stages && plan.stages.length > 0
                    ? plan.stages[0].targetCigarettes
                    : "-"}
                </b>
              </div>
            </div>

            <div className="suggest-table-wrapper">
              <table className="suggest-table">
                <thead>
                  <tr>
                    <th>Giai ƒëo·∫°n (kho·∫£ng 4 tu·∫ßn)</th>
                    <th>Th·ªùi gian</th>
                    <th>S·ªë ƒëi·∫øu m·ªói ng√†y</th>
                  </tr>
                </thead>
                <tbody>
                  {/* N·∫øu c√≥ d·ªØ li·ªáu c√°c giai ƒëo·∫°n th√¨ hi·ªÉn th·ªã t·ª´ng d√≤ng */}
                  {plan.stages && plan.stages.length > 0 ? (
                    plan.stages.map((stage, idx) => (
                      <tr key={stage.id || idx}>
                        <td>Giai ƒëo·∫°n {stage.stageNumber || idx + 1}</td>
                        <td>
                          {stage.week_range ||
                            `Tu·∫ßn ${1 + idx * 4}-${4 + idx * 4}`}
                        </td>
                        <td>{stage.targetCigarettes} ƒëi·∫øu</td>
                      </tr>
                    ))
                  ) : (
                    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu giai ƒëo·∫°n th√¨ b√°o kh√¥ng c√≥
                    <tr>
                      <td colSpan={3}>Kh√¥ng c√≥ d·ªØ li·ªáu giai ƒëo·∫°n</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            {/* Ch·ªâ hi·ªÉn th·ªã ph·∫ßn x√°c nh·∫≠n n·∫øu ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n */}
            {!isConfirmed && (
              <div className="suggest-actions">
                <div className="suggest-question">
                  <h3>ü§î B·∫°n c√≥ mu·ªën x√°c nh·∫≠n k·∫ø ho·∫°ch n√†y kh√¥ng?</h3>
                  <p>
                    N·∫øu ƒë·ªìng √Ω, k·∫ø ho·∫°ch s·∫Ω ƒë∆∞·ª£c l∆∞u v√† b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu theo
                    d√µi ti·∫øn tr√¨nh cai thu·ªëc. N·∫øu kh√¥ng, b·∫°n c√≥ th·ªÉ t·ª± l·∫≠p k·∫ø
                    ho·∫°ch kh√°c.
                  </p>
                </div>

                <div className="suggest-buttons">
                  <Button
                    type="primary"
                    size="large"
                    loading={confirmLoading}
                    onClick={handleConfirmPlan}
                    style={{
                      backgroundColor: "#52c41a",
                      borderColor: "#52c41a",
                      marginRight: 16,
                    }}
                  >
                    ‚úÖ X√°c nh·∫≠n k·∫ø ho·∫°ch n√†y
                  </Button>

                  <Link
                    to="/create-planning"
                    onClick={() => {
                      // X√≥a quitPlanId c≈© ƒë·ªÉ t·∫°o k·∫ø ho·∫°ch m·ªõi
                      localStorage.removeItem("quitPlanId");
                    }}
                    style={{
                      display: "inline-block",
                      padding: "12px 24px",
                      backgroundColor: "#f0f0f0",
                      border: "1px solid #d9d9d9",
                      borderRadius: "8px",
                      color: "#333",
                      textDecoration: "none",
                      fontSize: "16px",
                      fontWeight: "600",
                    }}
                  >
                    üìù T·ª± l·∫≠p k·∫ø ho·∫°ch kh√°c
                  </Link>
                </div>
              </div>
            )}

            {/* Hi·ªÉn th·ªã th√¥ng b√°o ƒë√£ x√°c nh·∫≠n */}
            {isConfirmed && (
              <div className="suggest-confirmed">
                <div
                  style={{
                    textAlign: "center",
                    padding: 30,
                    backgroundColor: "#f6ffed",
                    border: "1px solid #b7eb8f",
                    borderRadius: 8,
                    marginTop: 20,
                  }}
                >
                  <h3
                    style={{
                      color: "#52c41a",
                      marginBottom: 10,
                    }}
                  >
                    ‚úÖ K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!
                  </h3>
                  <p style={{ color: "#666", margin: 0 }}>
                    K·∫ø ho·∫°ch s·∫Ω ƒë∆∞·ª£c l∆∞u v√† b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu theo d√µi ti·∫øn
                    tr√¨nh cai thu·ªëc. Ch√∫c b·∫°n th√†nh c√¥ng!
                  </p>
                </div>
              </div>
            )}
          </>
        )}
      </div>
      <Footer />
    </>
  );
}

export default SuggestPlaning;
