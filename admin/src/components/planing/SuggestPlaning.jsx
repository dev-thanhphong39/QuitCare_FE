import React, { useEffect, useState } from "react";
import api from "../../configs/axios";
import Navbar from "../navbar/Navbar";
import Footer from "../footer/Footer";
import "./SuggestPlaning.css";
import { useNavigate, Link } from "react-router-dom";
import { Modal, Button } from "antd";
import dayjs from "dayjs"; // ‚úÖ Th√™m import dayjs

function SuggestPlaning() {
  // ƒê·ªçc tr·∫°ng th√°i x√°c nh·∫≠n t·ª´ localStorage khi kh·ªüi t·∫°o
  const accountId = localStorage.getItem("accountId");
  const [isConfirmed, setIsConfirmed] = useState(
    () => localStorage.getItem(`plan_confirmed_${accountId}`) === "true"
  );
  const [plan, setPlan] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [confirmLoading, setConfirmLoading] = useState(false);
  const [showConfirmedMessage, setShowConfirmedMessage] = useState(false);
  const [justConfirmed, setJustConfirmed] = useState(false);
  const [countdown, setCountdown] = useState(10);
  const navigate = useNavigate();

  // ‚úÖ S·ª≠a l·∫°i h√†m t√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
  const getPlanDates = (plan) => {
    if (!plan || !plan.stages || plan.stages.length === 0) {
      return { startDate: null, endDate: null };
    }

    // L·∫•y ng√†y b·∫Øt ƒë·∫ßu t·ª´ backend ho·∫∑c d√πng ng√†y hi·ªán t·∫°i
    const startDate = plan.startDate ? dayjs(plan.startDate) : dayjs();

    // ‚úÖ T√≠nh ng√†y k·∫øt th√∫c = ng√†y k·∫øt th√∫c c·ªßa giai ƒëo·∫°n cu·ªëi c√πng
    const lastStageIndex = plan.stages.length - 1;
    const lastStageStart = startDate.add(lastStageIndex * 4, "week");
    const endDate = lastStageStart.add(4, "week").subtract(1, "day");

    return { startDate, endDate };
  };

  // ‚úÖ Gi·ªØ nguy√™n h√†m getStageDates
  const getStageDates = (stageIndex, startDate) => {
    if (!startDate) return { stageStart: null, stageEnd: null };

    const stageStart = startDate.add(stageIndex * 4, "week");
    const stageEnd = stageStart.add(4, "week").subtract(1, "day");

    return { stageStart, stageEnd };
  };

  // ‚úÖ S·ª≠a useEffect - ch·ªâ hi·ªÉn th·ªã khi v·ª´a m·ªõi x√°c nh·∫≠n
  useEffect(() => {
    if (justConfirmed) {
      setShowConfirmedMessage(true);
      setCountdown(10); // Reset countdown v·ªÅ 10

      // ‚úÖ T·∫°o interval ƒë·ªÉ ƒë·∫øm ng∆∞·ª£c m·ªói gi√¢y
      const countdownInterval = setInterval(() => {
        setCountdown((prev) => {
          if (prev <= 1) {
            // Khi ƒë·∫øm v·ªÅ 0, ·∫©n th√¥ng b√°o
            setShowConfirmedMessage(false);
            setJustConfirmed(false);
            clearInterval(countdownInterval);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      // Cleanup interval khi component unmount ho·∫∑c dependency thay ƒë·ªïi
      return () => clearInterval(countdownInterval);
    }
  }, [justConfirmed]);

  useEffect(() => {
    if (!accountId) {
      navigate("/login");
      return;
    }

    // H√†m l·∫•y k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t
    async function fetchPlan() {
      setLoading(true);
      setError("");

      try {
        // Ki·ªÉm tra xem c√≥ k·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c l∆∞u trong backend kh√¥ng
        const res = await api.get(`/v1/customers/${accountId}/quit-plans`);
        if (res.data && !Array.isArray(res.data)) {
          setPlan(res.data);
          // Ki·ªÉm tra xem ƒë√£ x√°c nh·∫≠n ch∆∞a
          if (res.data.isAgreedPlan) {
            setIsConfirmed(true);
          }
          setLoading(false);
          return;
        }
      } catch (err) {
        // N·∫øu ch∆∞a c√≥ k·∫ø ho·∫°ch trong backend, ƒë·ªçc t·ª´ localStorage
        console.log("Ch∆∞a c√≥ k·∫ø ho·∫°ch trong backend, ƒë·ªçc t·ª´ localStorage");
      }

      // ƒê·ªçc k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t t·ª´ localStorage
      const suggestedPlan = localStorage.getItem("suggestedPlan");
      if (suggestedPlan) {
        const planData = JSON.parse(suggestedPlan);
        setPlan(planData);
      } else {
        setError("Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t.");
      }

      setLoading(false);
    }

    fetchPlan();
  }, [accountId, navigate]);

  // H√†m x·ª≠ l√Ω x√°c nh·∫≠n k·∫ø ho·∫°ch
  const handleConfirmPlan = async () => {
    setConfirmLoading(true);
    try {
      // L·∫•y th√¥ng tin kh·∫£o s√°t t·ª´ localStorage
      const surveyData = localStorage.getItem("planSurvey");
      if (!surveyData) {
        throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin kh·∫£o s√°t");
      }

      const survey = JSON.parse(surveyData);

      // B∆∞·ªõc 1: G·ª≠i th√¥ng tin kh·∫£o s√°t
      const payload = {
        started_smoking_age: parseInt(survey.started_smoking_age),
        cigarettes_per_day: parseInt(survey.cigarettes_per_day),
        cigarettes_per_pack: parseInt(survey.cigarettes_per_pack),
        timeToFirstCigarette: mapTime(survey.timeToFirstCigarette),
        status: "ACTIVE",
        quitAttempts: mapQuitAttempts(survey.quitAttempts),
        longestQuitDuration: mapDuration(survey.longestQuitDuration),
        cravingWithoutSmoking: survey.cravingWithoutSmoking === "true",
        triggerSituation: survey.triggerSituation.trim(),
        quitIntentionTimeline: mapTimeline(survey.quitIntentionTimeline),
        readinessLevel: mapReadiness(survey.readinessLevel),
        quitReasons: survey.quitReasons,
      };

      await api.post(`/smoking-status/account/${accountId}`, payload);

      // B∆∞·ªõc 2: T·∫°o k·∫ø ho·∫°ch v·ªõi systemPlan = true v√† startDate
      const planResponse = await api.post(
        `/v1/customers/${accountId}/quit-plans`,
        {
          systemPlan: true,
          startDate: dayjs().format("YYYY-MM-DD"), // ‚úÖ Th√™m ng√†y b·∫Øt ƒë·∫ßu
        }
      );

      // B∆∞·ªõc 3: X√°c nh·∫≠n k·∫ø ho·∫°ch
      await api.put(
        `/v1/customers/${accountId}/quit-plans/${planResponse.data.id}`,
        {
          isAgreedPlan: true,
          quitPlanStatus: "DRAFT",
          startDate: dayjs().format("YYYY-MM-DD"), // ‚úÖ Th√™m ng√†y b·∫Øt ƒë·∫ßu
        }
      );

      // B∆∞·ªõc 4: L·∫•y l·∫°i d·ªØ li·ªáu k·∫ø ho·∫°ch t·ª´ backend v√† c·∫≠p nh·∫≠t state
      const updatedPlanResponse = await api.get(
        `/v1/customers/${accountId}/quit-plans`
      );
      if (updatedPlanResponse.data) {
        setPlan(updatedPlanResponse.data);
      }

      // ƒê√°nh d·∫•u ƒë√£ x√°c nh·∫≠n v√† v·ª´a m·ªõi x√°c nh·∫≠n
      setIsConfirmed(true);
      setJustConfirmed(true);
      localStorage.setItem(`plan_confirmed_${accountId}`, "true");

      // X√≥a d·ªØ li·ªáu t·∫°m th·ªùi
      localStorage.removeItem("suggestedPlan");
      localStorage.removeItem("planSurvey");

      Modal.success({
        title: "X√°c nh·∫≠n th√†nh c√¥ng!",
        content: "K·∫ø ho·∫°ch cai thu·ªëc ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Ch√∫c b·∫°n th√†nh c√¥ng!",
        okText: "ƒê√≥ng",
      });
    } catch (err) {
      console.error("L·ªói x√°c nh·∫≠n:", err);
      Modal.error({
        title: "L·ªói x√°c nh·∫≠n",
        content: "Kh√¥ng th·ªÉ x√°c nh·∫≠n k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i!",
      });
    } finally {
      setConfirmLoading(false);
    }
  };

  // ‚úÖ T√≠nh to√°n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
  const { startDate, endDate } = getPlanDates(plan);

  // Th√™m c√°c h√†m mapping t·ª´ Planning.jsx
  const mapTime = (value) => {
    switch (value) {
      case "‚â§5 ph√∫t":
        return "LESS_THAN_5_MIN";
      case "6‚Äì30 ph√∫t":
        return "BETWEEN_6_AND_30_MIN";
      case "31‚Äì60 ph√∫t":
        return "BETWEEN_31_AND_60_MIN";
      case ">60 ph√∫t":
        return "MORE_THAN_60_MIN";
      default:
        return "";
    }
  };

  const mapQuitAttempts = (value) => {
    const num = parseInt(value);
    if (num === 0) return "NONE";
    if (num <= 2) return "ONE_TO_TWO";
    return "MORE_THAN_THREE";
  };

  const mapDuration = (value) => {
    switch (value) {
      case "LESS_THAN_1_DAY":
        return "LESS_THAN_1_DAY";
      case "BETWEEN_1_AND_3_DAYS":
        return "BETWEEN_1_AND_3_DAYS";
      case "ONE_WEEK":
        return "ONE_WEEK";
      case "MORE_THAN_ONE_WEEK":
        return "MORE_THAN_ONE_WEEK";
      default:
        return "";
    }
  };

  const mapTimeline = (value) => {
    switch (value) {
      case "7 ng√†y":
        return "ONEWEEK";
      case "1 th√°ng":
        return "ONEMONTH";
      case "3 th√°ng":
        return "THREEMONTH";
      case "5 th√°ng":
        return "FIVEMONTH";
      case "Ch∆∞a ch·∫Øc":
        return "UNKNOWN";
      default:
        return "";
    }
  };

  const mapReadiness = (value) => {
    switch (value) {
      case "Ch∆∞a s·∫µn s√†ng":
        return "NOTREADY";
      case "ƒêang c√¢n nh·∫Øc":
        return "UNDERCONSIDERATION";
      case "R·∫•t s·∫µn s√†ng":
        return "ALREADY";
      default:
        return "";
    }
  };

  return (
    <>
      <Navbar />
      <div className="suggest-container">
        {loading ? (
          <div style={{ textAlign: "center", padding: 40 }}>ƒêang t·∫£i...</div>
        ) : error ? (
          <div style={{ color: "red", textAlign: "center", padding: 40 }}>
            {error}
          </div>
        ) : (
          <>
            <div className="suggest-header">
              <div>
                <span role="img" aria-label="plan">
                  üìã
                </span>
                <b> K·∫ø ho·∫°ch cai thu·ªëc ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t</b>
              </div>
              <div>
                <span role="img" aria-label="brain">
                  üß†
                </span>
                M·ª©c ƒë·ªô nghi·ªán h·ªá th·ªëng ƒë√°nh gi√°:{" "}
                <b>
                  {plan.addictionLevel === "LOW"
                    ? "Th·∫•p"
                    : plan.addictionLevel === "MEDIUM"
                    ? "Trung b√¨nh"
                    : "Cao"}
                </b>
              </div>
              <div>
                <span role="img" aria-label="cigarette">
                  üö¨
                </span>
                Trung b√¨nh s·ªë ƒëi·∫øu h√∫t m·ªói ng√†y:{" "}
                <b>
                  {plan.stages && plan.stages.length > 0
                    ? plan.stages[0].targetCigarettes
                    : "-"}
                </b>
              </div>
              {/* ‚úÖ Th√™m hi·ªÉn th·ªã ng√†y b·∫Øt ƒë·∫ßu d·ª± ki·∫øn */}
              <div>
                <span role="img" aria-label="calendar">
                  üìÖ
                </span>
                Ng√†y b·∫Øt ƒë·∫ßu d·ª± ki·∫øn:{" "}
                <b>
                  {startDate ? startDate.format("DD/MM/YYYY") : "07/07/2025"}
                </b>
              </div>
              {/* ‚úÖ Th√™m hi·ªÉn th·ªã ng√†y k·∫øt th√∫c d·ª± ki·∫øn */}
              <div>
                <span role="img" aria-label="finish">
                  üèÅ
                </span>
                Ng√†y k·∫øt th√∫c d·ª± ki·∫øn:{" "}
                <b>{endDate ? endDate.format("DD/MM/YYYY") : "24/11/2025"}</b>
              </div>
            </div>

            <div className="suggest-table-wrapper">
              <table className="suggest-table">
                <thead>
                  <tr>
                    <th>Giai ƒëo·∫°n</th>
                    <th>Th·ªùi gian</th>
                    <th>Ng√†y b·∫Øt ƒë·∫ßu</th>
                    <th>Ng√†y k·∫øt th√∫c</th>
                    <th>S·ªë ƒëi·∫øu m·ªói ng√†y</th>
                  </tr>
                </thead>
                <tbody>
                  {plan.stages && plan.stages.length > 0 ? (
                    plan.stages.map((stage, idx) => {
                      const { stageStart, stageEnd } = getStageDates(
                        idx,
                        startDate
                      );

                      return (
                        <tr key={stage.id || idx}>
                          <td>Giai ƒëo·∫°n {stage.stageNumber || idx + 1}</td>
                          <td>
                            {stage.week_range ||
                              `Tu·∫ßn ${1 + idx * 4} - ${4 + idx * 4}`}
                          </td>
                          <td>
                            {stageStart ? stageStart.format("DD/MM/YYYY") : "-"}
                          </td>
                          <td>
                            {stageEnd ? stageEnd.format("DD/MM/YYYY") : "-"}
                          </td>
                          <td>
                            {stage.targetCigarettes === 0 ? (
                              <span
                                style={{ color: "#52c41a", fontWeight: "bold" }}
                              >
                                Ho√†n to√†n cai
                              </span>
                            ) : (
                              `${stage.targetCigarettes} ƒëi·∫øu`
                            )}
                          </td>
                        </tr>
                      );
                    })
                  ) : (
                    <tr>
                      <td colSpan={5}>Kh√¥ng c√≥ d·ªØ li·ªáu giai ƒëo·∫°n</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            {/* Ch·ªâ hi·ªÉn th·ªã ph·∫ßn x√°c nh·∫≠n n·∫øu ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n */}
            {!isConfirmed && (
              <div className="suggest-actions">
                <div className="suggest-question">
                  <h3>ü§î B·∫°n c√≥ mu·ªën x√°c nh·∫≠n k·∫ø ho·∫°ch n√†y kh√¥ng?</h3>
                  <p>
                    N·∫øu ƒë·ªìng √Ω, k·∫ø ho·∫°ch s·∫Ω ƒë∆∞·ª£c l∆∞u v√† b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu theo
                    d√µi ti·∫øn tr√¨nh cai thu·ªëc. N·∫øu kh√¥ng, b·∫°n c√≥ th·ªÉ t·ª± l·∫≠p k·∫ø
                    ho·∫°ch kh√°c.
                  </p>
                </div>

                <div className="suggest-buttons">
                  <Button
                    type="primary"
                    size="large"
                    loading={confirmLoading}
                    onClick={handleConfirmPlan}
                    style={{
                      backgroundColor: "#52c41a",
                      borderColor: "#52c41a",
                      marginRight: 16,
                    }}
                  >
                    ‚úÖ X√°c nh·∫≠n k·∫ø ho·∫°ch n√†y
                  </Button>

                  <Button
                    type="default"
                    size="large"
                    onClick={() => {
                      navigate("/planning");
                    }}
                  >
                    üìù T·ª± l·∫≠p k·∫ø ho·∫°ch kh√°c
                  </Button>
                </div>
              </div>
            )}

            {/* Hi·ªÉn th·ªã th√¥ng b√°o ƒë√£ x√°c nh·∫≠n */}
            {isConfirmed && showConfirmedMessage && (
              <div className="suggest-confirmed">
                <div
                  style={{
                    textAlign: "center",
                    padding: 30,
                    backgroundColor: "#f6ffed",
                    border: "1px solid #b7eb8f",
                    borderRadius: 8,
                    marginTop: 20,
                    position: "relative",
                  }}
                >
                  <button
                    onClick={() => {
                      setShowConfirmedMessage(false);
                      setJustConfirmed(false);
                    }}
                    style={{
                      position: "absolute",
                      right: "12px",
                      top: "12px",
                      background: "none",
                      border: "none",
                      fontSize: "18px",
                      cursor: "pointer",
                      color: "#52c41a",
                    }}
                    title="ƒê√≥ng th√¥ng b√°o"
                  >
                    √ó
                  </button>

                  <h3
                    style={{
                      color: "#52c41a",
                      marginBottom: 10,
                    }}
                  >
                    ‚úÖ K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!
                  </h3>
                  <p style={{ color: "#666", margin: 0 }}>
                    K·∫ø ho·∫°ch s·∫Ω ƒë∆∞·ª£c l∆∞u v√† b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu theo d√µi ti·∫øn
                    tr√¨nh cai thu·ªëc. Ch√∫c b·∫°n th√†nh c√¥ng!
                  </p>

                  {/* ‚úÖ Th√¥ng b√°o ƒë·∫øm ng∆∞·ª£c - ƒë√£ x√≥a progress bar */}
                  <div
                    style={{
                      fontSize: "14px",
                      color: "#52c41a",
                      marginTop: "12px",
                      fontWeight: "500",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      gap: "8px",
                    }}
                  >
                    <span>Th√¥ng b√°o s·∫Ω t·ª± ƒë·ªông ·∫©n sau</span>
                    <span
                      style={{
                        display: "inline-flex",
                        alignItems: "center",
                        justifyContent: "center",
                        width: "24px",
                        height: "24px",
                        backgroundColor: "#52c41a",
                        color: "#fff",
                        borderRadius: "50%",
                        fontSize: "12px",
                        fontWeight: "bold",
                        animation:
                          countdown <= 3 ? "pulse 0.5s infinite" : "none",
                      }}
                    >
                      {countdown}
                    </span>
                    <span>gi√¢y</span>
                  </div>
                </div>
              </div>
            )}
          </>
        )}
      </div>
      <Footer />
    </>
  );
}

export default SuggestPlaning;
