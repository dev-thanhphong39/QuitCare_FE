import React, { useEffect, useState } from "react";
import api from "../../configs/axios";
import Navbar from "../navbar/Navbar";
import Footer from "../footer/Footer";
import "./SuggestPlaning.css";
import { useNavigate } from "react-router-dom";
import { Modal, Button } from "antd"; // Th√™m import Modal v√† Button

function SuggestPlaning() {
  // ƒê·ªçc tr·∫°ng th√°i x√°c nh·∫≠n t·ª´ localStorage khi kh·ªüi t·∫°o
  const accountId = localStorage.getItem("accountId");
  const [isConfirmed, setIsConfirmed] = useState(
    () => localStorage.getItem(`plan_confirmed_${accountId}`) === "true"
  );
  const [plan, setPlan] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [confirmLoading, setConfirmLoading] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p th√¨ chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
    if (!accountId) {
      navigate("/login");
      return;
    }
    // H√†m l·∫•y k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t t·ª´ API
    async function fetchPlan() {
      setLoading(true); // B·∫Øt ƒë·∫ßu loading
      setError(""); // X√≥a l·ªói c≈©
      try {
        // G·ªçi API l·∫•y k·∫ø ho·∫°ch cai thu·ªëc c·ªßa user
        const res = await api.get(`/v1/customers/${accountId}/quit-plans`);
        console.log("API tr·∫£ v·ªÅ:", res.data);
        // N·∫øu API tr·∫£ v·ªÅ object (ƒë√£ c√≥ k·∫ø ho·∫°ch)
        if (res.data && !Array.isArray(res.data)) {
          setPlan(res.data); // L∆∞u k·∫ø ho·∫°ch v√†o state
          // Kh√¥ng c·∫ßn ki·ªÉm tra isAgreedPlan t·ª´ backend n·ªØa, ch·ªâ d√πng FE
        } else {
          setError("Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch."); // Kh√¥ng c√≥ k·∫ø ho·∫°ch
        }
      } catch (err) {
        setError("Kh√¥ng l·∫•y ƒë∆∞·ª£c k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i!"); // L·ªói g·ªçi API
      }
      setLoading(false); // K·∫øt th√∫c loading
    }
    fetchPlan();
  }, [accountId, navigate]);

  // H√†m x·ª≠ l√Ω x√°c nh·∫≠n k·∫ø ho·∫°ch
  const handleConfirmPlan = async () => {
    setConfirmLoading(true);
    try {
      // S·ª≠a l·∫°i API call theo ƒë√∫ng format
      await api.put(`/v1/customers/${accountId}/quit-plans/${plan.id}`, {
        isAgreedPlan: true,
        quitPlanStatus: "DRAFT",
      });

      // ƒê√°nh d·∫•u ƒë√£ x√°c nh·∫≠n
      setIsConfirmed(true);
      localStorage.setItem(`plan_confirmed_${accountId}`, "true"); // L∆∞u tr·∫°ng th√°i ƒë√£ x√°c nh·∫≠n v√†o localStorage

      Modal.success({
        title: "X√°c nh·∫≠n th√†nh c√¥ng!",
        content: "K·∫ø ho·∫°ch cai thu·ªëc ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. Ch√∫c b·∫°n th√†nh c√¥ng!",
        okText: "ƒê√≥ng",
      });
    } catch (err) {
      Modal.error({
        title: "L·ªói x√°c nh·∫≠n",
        content: "Kh√¥ng th·ªÉ x√°c nh·∫≠n k·∫ø ho·∫°ch. Vui l√≤ng th·ª≠ l·∫°i!",
      });
    } finally {
      setConfirmLoading(false);
    }
  };

  // H√†m chuy·ªÉn sang t·ª± l·∫≠p k·∫ø ho·∫°ch
  const handleCreateOwnPlan = () => {
    Modal.confirm({
      title: "Chuy·ªÉn sang t·ª± l·∫≠p k·∫ø ho·∫°ch",
      content:
        "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·ªè k·∫ø ho·∫°ch ƒë·ªÅ xu·∫•t n√†y v√† t·ª± t·∫°o k·∫ø ho·∫°ch ri√™ng?",
      okText: "ƒê·ªìng √Ω",
      cancelText: "H·ªßy",
      onOk: () => {
        navigate("/create-planning");
      },
    });
  };

  return (
    <>
      <Navbar />
      <div className="suggest-container">
        {loading ? (
          // Hi·ªÉn th·ªã loading khi ƒëang t·∫£i d·ªØ li·ªáu
          <div style={{ textAlign: "center", padding: 40 }}>ƒêang t·∫£i...</div>
        ) : error ? (
          // Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ l·ªói
          <div style={{ color: "red", textAlign: "center", padding: 40 }}>
            {error}
          </div>
        ) : (
          // N·∫øu c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch th√¨ hi·ªÉn th·ªã th√¥ng tin k·∫ø ho·∫°ch
          <>
            <div className="suggest-header">
              <div>
                <span role="img" aria-label="plan">
                  üìã
                </span>
                <b> K·∫ø ho·∫°ch cai thu·ªëc ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t</b>
              </div>
              <div>
                <span role="img" aria-label="brain">
                  üß†
                </span>
                {/* Hi·ªÉn th·ªã m·ª©c ƒë·ªô nghi·ªán */}
                M·ª©c ƒë·ªô nghi·ªán h·ªá th·ªëng ƒë√°nh gi√°:{" "}
                <b>
                  {plan.addictionLevel === "LOW"
                    ? "Th·∫•p"
                    : plan.addictionLevel === "MEDIUM"
                    ? "Trung b√¨nh"
                    : "Cao"}
                </b>
              </div>
              <div>
                <span role="img" aria-label="cigarette">
                  üö¨
                </span>
                {/* Hi·ªÉn th·ªã s·ªë ƒëi·∫øu h√∫t m·ªói ng√†y ·ªü giai ƒëo·∫°n ƒë·∫ßu */}
                Trung b√¨nh s·ªë ƒëi·∫øu h√∫t m·ªói ng√†y:{" "}
                <b>
                  {plan.stages && plan.stages.length > 0
                    ? plan.stages[0].targetCigarettes
                    : "-"}
                </b>
              </div>
            </div>

            <div className="suggest-table-wrapper">
              <table className="suggest-table">
                <thead>
                  <tr>
                    <th>Giai ƒëo·∫°n (kho·∫£ng 4 tu·∫ßn)</th>
                    <th>Th·ªùi gian</th>
                    <th>S·ªë ƒëi·∫øu m·ªói ng√†y</th>
                  </tr>
                </thead>
                <tbody>
                  {/* N·∫øu c√≥ d·ªØ li·ªáu c√°c giai ƒëo·∫°n th√¨ hi·ªÉn th·ªã t·ª´ng d√≤ng */}
                  {plan.stages && plan.stages.length > 0 ? (
                    plan.stages.map((stage, idx) => (
                      <tr key={stage.id || idx}>
                        <td>Giai ƒëo·∫°n {stage.stageNumber || idx + 1}</td>
                        <td>
                          {stage.week_range ||
                            `Tu·∫ßn ${1 + idx * 4}-${4 + idx * 4}`}
                        </td>
                        <td>{stage.targetCigarettes} ƒëi·∫øu</td>
                      </tr>
                    ))
                  ) : (
                    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu giai ƒëo·∫°n th√¨ b√°o kh√¥ng c√≥
                    <tr>
                      <td colSpan={3}>Kh√¥ng c√≥ d·ªØ li·ªáu giai ƒëo·∫°n</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            {/* Ch·ªâ hi·ªÉn th·ªã ph·∫ßn x√°c nh·∫≠n n·∫øu ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n */}
            {!isConfirmed && (
              <div className="suggest-actions">
                <div className="suggest-question">
                  <h3>ü§î B·∫°n c√≥ mu·ªën x√°c nh·∫≠n k·∫ø ho·∫°ch n√†y kh√¥ng?</h3>
                  <p style={{ color: "#666", marginBottom: 20 }}>
                    K·∫ø ho·∫°ch s·∫Ω ƒë∆∞·ª£c l∆∞u v√† b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu
                    theo d√µi ti·∫øn tr√¨nh cai thu·ªëc. Ch√∫c b·∫°n th√†nh c√¥ng!
                  </p>
                </div>

                <div className="suggest-buttons">
                  <Button
                    type="primary"
                    size="large"
                    loading={confirmLoading}
                    onClick={handleConfirmPlan}
                    style={{
                      backgroundColor: "#52c41a",
                      borderColor: "#52c41a",
                      marginRight: 16,
                    }}
                  >
                    ‚úÖ X√°c nh·∫≠n k·∫ø ho·∫°ch n√†y
                  </Button>

                  <Button
                    size="large"
                    onClick={handleCreateOwnPlan}
                    style={{
                      backgroundColor: "#f0f0f0",
                      borderColor: "#d9d9d9",
                      color: "#333",
                    }}
                  >
                    üìù T·ª± l·∫≠p k·∫ø ho·∫°ch kh√°c
                  </Button>
                </div>
              </div>
            )}

            {/* Hi·ªÉn th·ªã th√¥ng b√°o ƒë√£ x√°c nh·∫≠n */}
            {isConfirmed && (
              <div className="suggest-confirmed">
                <div
                  style={{
                    textAlign: "center",
                    padding: 30,
                    backgroundColor: "#f6ffed",
                    border: "1px solid #b7eb8f",
                    borderRadius: 8,
                    marginTop: 20,
                  }}
                >
                  <h3
                    style={{
                      color: "#52c41a",
                      marginBottom: 10,
                    }}
                  >
                    ‚úÖ K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!
                  </h3>
                  <p style={{ color: "#666", margin: 0 }}>
                    B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu theo d√µi ti·∫øn tr√¨nh cai thu·ªëc c·ªßa m√¨nh.
                  </p>
                </div>
              </div>
            )}
          </>
        )}
      </div>
      <Footer />
    </>
  );
}

export default SuggestPlaning;
